
-- Inspecting data
	
select * from dbo.UK_Spotify

-- Checking unique values
	
select distinct artist from dbo.UK_Spotify

-- ANALYST

--I. Basic analysis of songs and artists

--- Listing 10 most popular song which is released in 2023
	
select top 10 song from dbo.UK_Spotify 

--- Calculating the total tracks of all artists in November,2023
	
select sum(total_tracks) from dbo.UK_Spotify 
where month(date) = 11 and year(date) = 2023

--- Listing 1 most popular song of each artist
select song, artist, popularity
from (
	select song, artist, popularity, ROW_NUMBER () OVER (PARTITION BY artist ORDER BY popularity DESC) AS rank
	from dbo.UK_Spotify
	    ) as sub
where rank = 1;

--II. Analyze changes and fluctuations

--- Search for the song with the largest position change rate between two consecutive months 
---and display information about that song and artist

WITH RankedSongs as (
with select song, artist, date, position,
		 lag(position) over (partition by song, artist order by date) as previous_position
		 from UK_Spotify
	)
select song, artist, max(previous_position - position) as max_position_change
from RankedSongs
where previous_position IS NOT NULL
group by song, artist

---Calculating the proportion of songs with explicit content on the UK Spotify chart 
---compared to the total number of songs in a specific time period
	
select count(*) as total_explicit_songs,
		   count(*) / count(distinct song) as explicit_song_ratio
from dbo.UK_Spotify
where is_explicit = 1 and date >='2023-5-5' and date <= '2023-10-10'

--- Create a list of artists with at least two songs in the UK Spotify chart 
---during the last 6 months and display infomation about them
with ArtistSongCounts as (
  select artist, count(distinct song) as song_count
  from dbo.UK_Spotify
  where date >= dateadd(month, -5, getdate())
  group by artist
  having count(distinct song) >= 2
	)
select artist, song_count
from ArtistSongCounts

---Analyze the difference between album types (single, album, compilation) 
---in the top 30 songs on UK Spotify
	
select album_type, count(song) as song_count, 
       avg(popularity) as avg_popularity,
		   avg(duration_ms) as avg_duration
from dbo.UK_Spotify
where position <= 30
group by album_type

--- Caculating the total duration of songs on the UK Spotify chart by month 
---and compare it to the previous month
	
select FORMAT(date,'yyyy-MM') as month ,
		   sum(duration_ms) as total_duration,
		   lag(sum(duration_ms)) over(order by FORMAT(date,'yyyy-MM')) as previous_month_total_duration
from dbo.UK_Spotify
group by FORMAT(date,'yyyy-MM')

--- Calculating the total number of listens (popularity) for each artist in the current month 
---and sort the list of artists in descending order of that total number of listens
	
select artist, sum(popularity) as total_popularity
from dbo.UK_Spotify
where format(date,'yyyy-MM') = '2023-11'
group by artist
order by total_popularity

---Analyze the change in the position of songs in the top 44 songs on UK Spotify by day, week, or month, 
---and find the songs with the biggest fluctuations, smallest, or most stable?
	
  -- Create a CTE table to calculate the change in song positions from day to day
  with daily_change as (
		select date,song,position, 
		       LAG(position) over(partition by song order by date) as prev_position,
		       position - LAG(position) OVER (PARTITION BY song ORDER BY date) AS position_change
		from dbo.UK_Spotify WHERE position <= 44 )
		select song, [date], position_change,
		  case 
			  when position_change > 0 then 'Up'
			  when position_change <0 then 'down'
			  else 'stable'
			  end as trend
		from daily_change
		order by abs(position_change) desc;

	-- Create a CTE table to calculate the change in song positions from week to week
		with weekly_change as (
		
    select DATEPART(year,date) as year,
			   DATEPART(week,date) as week,song,position,
			   lag(position) over (partition by song order by date) as prev_position,
			   position - lag(position) over (partition by song order by date) as position_change
	  from dbo.UK_Spotify
	  where position <= 44
	  )
    select song, [week], position_change,
		  case 
			  when position_change > 0 then 'Up'
			  when position_change <0 then 'down'
			  else 'stable'
			  end as trend
	  from weekly_change
		order by abs(position_change) desc;

	-- Create a CTE table to calculate the change in song positions from week to week
		with monthly_change as (
		 
    select DATEPART(year,date) as year,
				   DATEPART(month,date) as month, song,position,
			     lag(position) over (partition by song order by date) as prev_position,
			     position - lag(position) over (partition by song order by date) as position_change
		from dbo.UK_Spotify
		where position <= 44
		)
		select song, [month], position_change,
		  case 
			  when position_change > 0 then 'Up'
			  when position_change <0 then 'down'
			  else 'stable'
			  end as trend
		from monthly_change
		order by abs(position_change) desc;
    
